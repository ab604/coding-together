[
["index.html", "Coding togetheR Welcome R and RStudio Who is coding togetheR for? Code of conduct", " Coding togetheR Alistair Bailey April 28 2019 Welcome A Carrick bend: The Carrick bend is a type of sailor’s knot used for joining two lines. Coding togetheR is a series of collaborative workshops to teach foundational R coding and data science skills at the University of Southampton in 2019. This book contains the materials covered over eight, two hour sessions. The workshops are for anyone at the University of Southampton with data to analyse and who is struggling with their current tools. This series of eight weekly two hour workshops provides an introduction to working with data using R in a supported environment. Unlike traditional lessons, we all code together with the emphasis on participants learning by doing and by helping each other. These materials are a mash-up of my own and many others. I’ve endeavoured to credit everyone appropriately, but please message me if I’ve messed up and I’ll correct it. The main sources used here are: R for data science (R4DS), the R4DS community, the Carpentries, Hands on Programming in R, swiRlstats and Teaching Tech togetheR. It was written using R (R Core Team 2019) in RStudio (RStudio Team 2018) using the bookdown package (Xie 2018). To follow these materials you will need an up to date version of R (R Core Team 2019) and RStudio (RStudio Team 2018). This may require requesting permission to install software from Isolutions if you have a University laptop. R and RStudio If you are new to R, then the first thing to know is that R is a programming language and RStudio is a program for working with R called an integrated development environment (IDE). You can use R without RStudio, but not the other way around. Further details in Chapter 1. Download R here and Download RStudio Desktop here. These materials were generated using R version 3.6. Once you’ve installed R and RStudio, you’ll also need a few R packages. Packages are collections of functions. Open RStudio and put the code below into the Console window and press Enter to install the tidyverse,dslabs,janitor and here packages. install.packages(c(&quot;tidyverse&quot;,&quot;dslabs&quot;,&quot;janitor&quot;,&quot;here&quot;)) Who is coding togetheR for? Following the lesson design process of (Wilson 2018): Arshad As a PhD student in ecology Arshad doesn’t have any formal coding training, but is gathering field data about bird populations. He is daunted by the prospect of learning to code. These lessons will introduce Arshad to coding by showing him how to organise and automate analysis of his data. Jenny As a post doctoral researcher in gerontology Jenny has experience of research, but is unsatisfied with her current spreadsheet tools for analysing data. These lessons will show her how to write code to analyse spreadsheets. Lin As a principal investigator Lin has experience using MATLAB, but has not used R and would like to know more about it. These lessons will introduce Lin to R syntax and RStudio workflows. Code of conduct Coding togetheR is for everyone, and in order to make it a supportive and inclusive environment we subscribe to the Carpentries Code of Conduct. Please follow the link for details. In a nutshell, expected behaviour is as follows: Use welcoming and inclusive language Be respectful of different viewpoints and experiences Gracefully accept constructive criticism Focus on what is best for the community Show courtesy and respect towards other community members Participants who violate the code of conduct, will be asked to stop immediately and if necessary asked to leave the workshop and incidents reported as per University guidance on inappropriate behaviour. References "],
["getting-started.html", "1 Getting started in R and RStudio 1.1 Coding is for everyone 1.2 A little background and philosophy 1.3 RStudio 1.4 Where am I? 1.5 A project orientated workflow 1.6 Atoms of R 1.7 Data frames 1.8 Lists, matrices and arrays 1.9 Plotting data 1.10 Exporting data", " 1 Getting started in R and RStudio By the end of this chapter are you will: understand how to install packages in RStudio. know how to get help when you are stuck. have set-up your first R project. understand the atoms of R and how to use them to build data frames. understand how to assign objects in R. have created a plot using the ggplot2 package. have written outputs from R to files. 1.1 Coding is for everyone If, when faced with the thought of starting to learning to code you feel like this: Figure 1.1: Imposter syndrome. Then hopefully by the end of these materials, you’ll feel a bit more like this: Figure 1.2: R cat And if you like that, there is more at R for cats. 1.2 A little background and philosophy “There are only two kinds of languages: the ones people complain about and the ones nobody uses” Bjarne Stroustrup, the inventor C++ 1.2.1 What is R? R is a programming language that follows the philosophy laid down by it’s predecessor S. The philosophy being that users begin in an interactive environment where they don’t consciously think of themselves as programming. It was created in 1993, and documented in (Ihaka and Gentleman 1996). Reasons R has become popular include that it is both open source and cross platform, and that it has broad functionality, from the analysis of data and creating powerful graphical visualisations and web apps. Like all languages though it has limitations, for example the syntax is initially confusing. Users and developers of R have in recent years sought to develop an inclusive and welcoming community which can found on twitter #rstats or through RStudio Community. There are many useR groups, including groups seeking to promote diversity such as R-Ladies: Jumping Rivers maintains a list. 1.2.2 Why learn to code at all? In terms of the philosophy of learning to code: The primary motivation for using tools such as R is to get more done, in less time and with less pain. And the overall aim is to understand and communicate findings from our data. Additionally, as per Greg Wilson’s description of his motivation for teaching, if we’re going to help make the world a better place, a bit of coding is likely to be key tool in your kit. Figure 1.3: Data project workflow. As shown in Figure 1.3 of typical data analysis workflow, to acheive this aim we need to learn tools that enable us to perform the fundamental tasks of tasks of importing, tidying and often transforming the data. Transformation means for example, selecting a subset of the data to work with, or calculating the mean of a set of observations. 1.2.3 A little goes a long way Returning to our cat friend in Figure 1.2, one doesn’t need to be an expert programmer to find coding useful. As illustrated in Figure 1.4 there is a whole spectrum of code users from practioners who are focused on applying some R to their specific problems, to those programmers who develop the R language itself. In reality one may move around on that spectrum as ones interests change over time. Figure 1.4: The Practioner-Programmer spectrum 1.3 RStudio Let’s begin by learning about RStudio, the Integrated Development Environment (IDE). R is the language and RStudio is software created to facilitate our use of R. They are installed separately. You don’t need RStudio to use R, but you do need R to used RStudio. We will use R Studio IDE to write code, navigate the files found on our computer, inspect the variables we are going to create, and visualize the plots we will generate. R Studio can also be used for other things (e.g., version control, developing packages, writing Shiny apps) that we don’t have time to cover during this workshop. R Studio is divided into “Panes”, see Figure 1.5. When you first open it, there are three panes,the console where you type commands, your environment/history (top-right), and your files/plots/packages/help/viewer (bottom-right). The enivronment shows all the R objects you have created or are using, such as data you have imported. The output pane can be used to view any plots you have created. Not opened at first start up is the fourth default pane: the script editor pane, but this will open as soon as we create/edit a R script (or many other document types). The script editor is where will be typing much of the time. Figure 1.5: The Rstudio Integrated Development Environment (IDE). The placement of these panes and their content can be customized (see menu, R Studio -&gt; Tools -&gt; Global Options -&gt; Pane Layout). One of the advantages of using R Studio is that all the information you need to write code is available ina single window. Additionally, with many shortcuts, auto-completion, and highlighting for the major file types you use while developing in R, R Studio will make typing easier and less error-prone. Time for another philosphical diversion… 1.3.1 What is real? At the start, we might consider our environment “real” - that is to say the objects we’ve created/loaded and are using are “real”. But it’s much better in the long run to consider our scripts as “real” - our scripts are where we write down the code that creates our objects that we’ll be using in our environment. As a script is a document, it is reproducible Or to put it another way: we can easily recreate an environment from our scripts, but not so easily create a script from an enivronment. To support this notion of thinking in terms of our scripts as real, we recommend turning off the preservation of workspaces between sessions by setting the Tools &gt; Global Options menu in R studio as shown in Figure 1.6: Figure 1.6: Don’t save your workspace, save your script instead. 1.4 Where am I? R studio tells you where you are in terms of directory address like so: Figure 1.7: Your working directory If you are unfamiliar with how computers structure folders and files, then consider a tree with a root from which the trunk extends and branches divide. In the image above, the ~ symbol represents a contraction of the path from the root to the ‘home’ directory (in Windows this is ‘Documents’) and then the forward slashes are the branches. (Note: Windows uses backslashes, Unix type systems and R use forwardslashes). It is good practice to keep a set of related data, analyses, and text self-contained in a single folder, called the working directory. All of the scripts within this folder can then use relative paths to files that indicate where inside the project a file is located (as opposed to absolute paths, which point to where a file is on a specific computer). Working this way makes it a lot easier to move your project around on your computer and share it with others without worrying about whether or not the underlying scripts will still work. Figure 1.8: A typical directory structure 1.4.1 Getting help 1.4.2 Installing packages 1.4.3 Using functions 1.5 A project orientated workflow Jenny Bryan’s article 1.5.1 RStudio Projects and here package 1.6 Atoms of R 1.7 Data frames 1.8 Lists, matrices and arrays 1.9 Plotting data 1.10 Exporting data References "],
["data-wrangle-1.html", "2 Data wrangling I", " 2 Data wrangling I "],
["data-wrangle-2.html", "3 Data wrangling II", " 3 Data wrangling II "],
["functions.html", "4 Functions", " 4 Functions "],
["modelling.html", "5 Exploratory modelling", " 5 Exploratory modelling "],
["viz.html", "6 Visualistion", " 6 Visualistion "],
["reports.html", "7 Reports", " 7 Reports Using R for report writing and presentations. "]
]
